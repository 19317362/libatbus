// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ATBUSPROTO_ATBUS_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_ATBUSPROTO_ATBUS_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"


namespace atbus {
namespace protocol {

struct forward_data;
struct channel_data;
struct node_data;
struct node_tree;
struct ping_data;
struct reg_data;
struct conn_data;
struct msg_body;
struct msg_head;
struct msg;

enum CMD {
  CMD_CMD_INVALID = 0,
  CMD_CMD_DATA_TRANSFORM_REQ = 1,
  CMD_CMD_DATA_TRANSFORM_RSP = 2,
  CMD_CMD_NODE_SYNC_REQ = 33,
  CMD_CMD_NODE_SYNC_RSP = 34,
  CMD_CMD_NODE_REG_REQ = 35,
  CMD_CMD_NODE_REG_RSP = 36,
  CMD_CMD_NODE_CONN_SYN = 38,
  CMD_CMD_NODE_PING = 39,
  CMD_CMD_NODE_PONG = 40
};

inline const char **EnumNamesCMD() {
  static const char *names[] = { "CMD_INVALID", "CMD_DATA_TRANSFORM_REQ", "CMD_DATA_TRANSFORM_RSP", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "CMD_NODE_SYNC_REQ", "CMD_NODE_SYNC_RSP", "CMD_NODE_REG_REQ", "CMD_NODE_REG_RSP", "", "CMD_NODE_CONN_SYN", "CMD_NODE_PING", "CMD_NODE_PONG", nullptr };
  return names;
}

inline const char *EnumNameCMD(CMD e) { return EnumNamesCMD()[static_cast<int>(e)]; }

struct forward_data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t from() const { return GetField<uint64_t>(4, 0); }
  bool mutate_from(uint64_t from) { return SetField(4, from); }
  uint64_t to() const { return GetField<uint64_t>(6, 0); }
  bool mutate_to(uint64_t to) { return SetField(6, to); }
  const flatbuffers::Vector<uint64_t> *router() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(8); }
  flatbuffers::Vector<uint64_t> *mutable_router() { return GetPointer<flatbuffers::Vector<uint64_t> *>(8); }
  const flatbuffers::Vector<int8_t> *content() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(10); }
  flatbuffers::Vector<int8_t> *mutable_content() { return GetPointer<flatbuffers::Vector<int8_t> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* from */) &&
           VerifyField<uint64_t>(verifier, 6 /* to */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* router */) &&
           verifier.Verify(router()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* content */) &&
           verifier.Verify(content()) &&
           verifier.EndTable();
  }
};

struct forward_dataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_from(uint64_t from) { fbb_.AddElement<uint64_t>(4, from, 0); }
  void add_to(uint64_t to) { fbb_.AddElement<uint64_t>(6, to, 0); }
  void add_router(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> router) { fbb_.AddOffset(8, router); }
  void add_content(flatbuffers::Offset<flatbuffers::Vector<int8_t>> content) { fbb_.AddOffset(10, content); }
  forward_dataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  forward_dataBuilder &operator=(const forward_dataBuilder &);
  flatbuffers::Offset<forward_data> Finish() {
    auto o = flatbuffers::Offset<forward_data>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<forward_data> Createforward_data(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t from = 0,
   uint64_t to = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint64_t>> router = 0,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> content = 0) {
  forward_dataBuilder builder_(_fbb);
  builder_.add_to(to);
  builder_.add_from(from);
  builder_.add_content(content);
  builder_.add_router(router);
  return builder_.Finish();
}

struct channel_data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *address() const { return GetPointer<const flatbuffers::String *>(4); }
  flatbuffers::String *mutable_address() { return GetPointer<flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* address */) &&
           verifier.Verify(address()) &&
           verifier.EndTable();
  }
};

struct channel_dataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<flatbuffers::String> address) { fbb_.AddOffset(4, address); }
  channel_dataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  channel_dataBuilder &operator=(const channel_dataBuilder &);
  flatbuffers::Offset<channel_data> Finish() {
    auto o = flatbuffers::Offset<channel_data>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<channel_data> Createchannel_data(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> address = 0) {
  channel_dataBuilder builder_(_fbb);
  builder_.add_address(address);
  return builder_.Finish();
}

struct node_data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t bus_id() const { return GetField<uint64_t>(4, 0); }
  bool mutate_bus_id(uint64_t bus_id) { return SetField(4, bus_id); }
  uint8_t overwrite() const { return GetField<uint8_t>(6, 0); }
  bool mutate_overwrite(uint8_t overwrite) { return SetField(6, overwrite); }
  uint8_t has_global_tree() const { return GetField<uint8_t>(8, 0); }
  bool mutate_has_global_tree(uint8_t has_global_tree) { return SetField(8, has_global_tree); }
  uint8_t children_id_mask() const { return GetField<uint8_t>(10, 0); }
  bool mutate_children_id_mask(uint8_t children_id_mask) { return SetField(10, children_id_mask); }
  const flatbuffers::Vector<flatbuffers::Offset<node_data>> *children() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<node_data>> *>(12); }
  flatbuffers::Vector<flatbuffers::Offset<node_data>> *mutable_children() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<node_data>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* bus_id */) &&
           VerifyField<uint8_t>(verifier, 6 /* overwrite */) &&
           VerifyField<uint8_t>(verifier, 8 /* has_global_tree */) &&
           VerifyField<uint8_t>(verifier, 10 /* children_id_mask */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* children */) &&
           verifier.Verify(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           verifier.EndTable();
  }
};

struct node_dataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bus_id(uint64_t bus_id) { fbb_.AddElement<uint64_t>(4, bus_id, 0); }
  void add_overwrite(uint8_t overwrite) { fbb_.AddElement<uint8_t>(6, overwrite, 0); }
  void add_has_global_tree(uint8_t has_global_tree) { fbb_.AddElement<uint8_t>(8, has_global_tree, 0); }
  void add_children_id_mask(uint8_t children_id_mask) { fbb_.AddElement<uint8_t>(10, children_id_mask, 0); }
  void add_children(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<node_data>>> children) { fbb_.AddOffset(12, children); }
  node_dataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  node_dataBuilder &operator=(const node_dataBuilder &);
  flatbuffers::Offset<node_data> Finish() {
    auto o = flatbuffers::Offset<node_data>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<node_data> Createnode_data(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t bus_id = 0,
   uint8_t overwrite = 0,
   uint8_t has_global_tree = 0,
   uint8_t children_id_mask = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<node_data>>> children = 0) {
  node_dataBuilder builder_(_fbb);
  builder_.add_bus_id(bus_id);
  builder_.add_children(children);
  builder_.add_children_id_mask(children_id_mask);
  builder_.add_has_global_tree(has_global_tree);
  builder_.add_overwrite(overwrite);
  return builder_.Finish();
}

struct node_tree FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<node_data>> *nodes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<node_data>> *>(4); }
  flatbuffers::Vector<flatbuffers::Offset<node_data>> *mutable_nodes() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<node_data>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* nodes */) &&
           verifier.Verify(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           verifier.EndTable();
  }
};

struct node_treeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<node_data>>> nodes) { fbb_.AddOffset(4, nodes); }
  node_treeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  node_treeBuilder &operator=(const node_treeBuilder &);
  flatbuffers::Offset<node_tree> Finish() {
    auto o = flatbuffers::Offset<node_tree>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<node_tree> Createnode_tree(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<node_data>>> nodes = 0) {
  node_treeBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

struct ping_data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t id() const { return GetField<uint64_t>(4, 0); }
  bool mutate_id(uint64_t id) { return SetField(4, id); }
  int64_t time() const { return GetField<int64_t>(6, 0); }
  bool mutate_time(int64_t time) { return SetField(6, time); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* id */) &&
           VerifyField<int64_t>(verifier, 6 /* time */) &&
           verifier.EndTable();
  }
};

struct ping_dataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) { fbb_.AddElement<uint64_t>(4, id, 0); }
  void add_time(int64_t time) { fbb_.AddElement<int64_t>(6, time, 0); }
  ping_dataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ping_dataBuilder &operator=(const ping_dataBuilder &);
  flatbuffers::Offset<ping_data> Finish() {
    auto o = flatbuffers::Offset<ping_data>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ping_data> Createping_data(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t id = 0,
   int64_t time = 0) {
  ping_dataBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_id(id);
  return builder_.Finish();
}

struct reg_data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t id() const { return GetField<uint64_t>(4, 0); }
  bool mutate_id(uint64_t id) { return SetField(4, id); }
  int32_t pid() const { return GetField<int32_t>(6, 0); }
  bool mutate_pid(int32_t pid) { return SetField(6, pid); }
  const flatbuffers::String *hostname() const { return GetPointer<const flatbuffers::String *>(8); }
  flatbuffers::String *mutable_hostname() { return GetPointer<flatbuffers::String *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<channel_data>> *channels() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<channel_data>> *>(10); }
  flatbuffers::Vector<flatbuffers::Offset<channel_data>> *mutable_channels() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<channel_data>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* id */) &&
           VerifyField<int32_t>(verifier, 6 /* pid */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* hostname */) &&
           verifier.Verify(hostname()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* channels */) &&
           verifier.Verify(channels()) &&
           verifier.VerifyVectorOfTables(channels()) &&
           verifier.EndTable();
  }
};

struct reg_dataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) { fbb_.AddElement<uint64_t>(4, id, 0); }
  void add_pid(int32_t pid) { fbb_.AddElement<int32_t>(6, pid, 0); }
  void add_hostname(flatbuffers::Offset<flatbuffers::String> hostname) { fbb_.AddOffset(8, hostname); }
  void add_channels(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<channel_data>>> channels) { fbb_.AddOffset(10, channels); }
  reg_dataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  reg_dataBuilder &operator=(const reg_dataBuilder &);
  flatbuffers::Offset<reg_data> Finish() {
    auto o = flatbuffers::Offset<reg_data>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<reg_data> Createreg_data(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t id = 0,
   int32_t pid = 0,
   flatbuffers::Offset<flatbuffers::String> hostname = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<channel_data>>> channels = 0) {
  reg_dataBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_channels(channels);
  builder_.add_hostname(hostname);
  builder_.add_pid(pid);
  return builder_.Finish();
}

struct conn_data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const channel_data *address() const { return GetPointer<const channel_data *>(4); }
  channel_data *mutable_address() { return GetPointer<channel_data *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* address */) &&
           verifier.VerifyTable(address()) &&
           verifier.EndTable();
  }
};

struct conn_dataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_address(flatbuffers::Offset<channel_data> address) { fbb_.AddOffset(4, address); }
  conn_dataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  conn_dataBuilder &operator=(const conn_dataBuilder &);
  flatbuffers::Offset<conn_data> Finish() {
    auto o = flatbuffers::Offset<conn_data>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<conn_data> Createconn_data(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<channel_data> address = 0) {
  conn_dataBuilder builder_(_fbb);
  builder_.add_address(address);
  return builder_.Finish();
}

struct msg_body FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const forward_data *forward() const { return GetPointer<const forward_data *>(4); }
  forward_data *mutable_forward() { return GetPointer<forward_data *>(4); }
  const node_tree *sync() const { return GetPointer<const node_tree *>(6); }
  node_tree *mutable_sync() { return GetPointer<node_tree *>(6); }
  const ping_data *ping() const { return GetPointer<const ping_data *>(8); }
  ping_data *mutable_ping() { return GetPointer<ping_data *>(8); }
  const reg_data *reg() const { return GetPointer<const reg_data *>(10); }
  reg_data *mutable_reg() { return GetPointer<reg_data *>(10); }
  const conn_data *conn() const { return GetPointer<const conn_data *>(12); }
  conn_data *mutable_conn() { return GetPointer<conn_data *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* forward */) &&
           verifier.VerifyTable(forward()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* sync */) &&
           verifier.VerifyTable(sync()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* ping */) &&
           verifier.VerifyTable(ping()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* reg */) &&
           verifier.VerifyTable(reg()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* conn */) &&
           verifier.VerifyTable(conn()) &&
           verifier.EndTable();
  }
};

struct msg_bodyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_forward(flatbuffers::Offset<forward_data> forward) { fbb_.AddOffset(4, forward); }
  void add_sync(flatbuffers::Offset<node_tree> sync) { fbb_.AddOffset(6, sync); }
  void add_ping(flatbuffers::Offset<ping_data> ping) { fbb_.AddOffset(8, ping); }
  void add_reg(flatbuffers::Offset<reg_data> reg) { fbb_.AddOffset(10, reg); }
  void add_conn(flatbuffers::Offset<conn_data> conn) { fbb_.AddOffset(12, conn); }
  msg_bodyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  msg_bodyBuilder &operator=(const msg_bodyBuilder &);
  flatbuffers::Offset<msg_body> Finish() {
    auto o = flatbuffers::Offset<msg_body>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<msg_body> Createmsg_body(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<forward_data> forward = 0,
   flatbuffers::Offset<node_tree> sync = 0,
   flatbuffers::Offset<ping_data> ping = 0,
   flatbuffers::Offset<reg_data> reg = 0,
   flatbuffers::Offset<conn_data> conn = 0) {
  msg_bodyBuilder builder_(_fbb);
  builder_.add_conn(conn);
  builder_.add_reg(reg);
  builder_.add_ping(ping);
  builder_.add_sync(sync);
  builder_.add_forward(forward);
  return builder_.Finish();
}

struct msg_head FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  CMD cmd() const { return static_cast<CMD>(GetField<int8_t>(4, 0)); }
  bool mutate_cmd(CMD cmd) { return SetField(4, static_cast<int8_t>(cmd)); }
  int32_t type() const { return GetField<int32_t>(6, 0); }
  bool mutate_type(int32_t type) { return SetField(6, type); }
  int32_t ret() const { return GetField<int32_t>(8, 0); }
  bool mutate_ret(int32_t ret) { return SetField(8, ret); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* cmd */) &&
           VerifyField<int32_t>(verifier, 6 /* type */) &&
           VerifyField<int32_t>(verifier, 8 /* ret */) &&
           verifier.EndTable();
  }
};

struct msg_headBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cmd(CMD cmd) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(cmd), 0); }
  void add_type(int32_t type) { fbb_.AddElement<int32_t>(6, type, 0); }
  void add_ret(int32_t ret) { fbb_.AddElement<int32_t>(8, ret, 0); }
  msg_headBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  msg_headBuilder &operator=(const msg_headBuilder &);
  flatbuffers::Offset<msg_head> Finish() {
    auto o = flatbuffers::Offset<msg_head>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<msg_head> Createmsg_head(flatbuffers::FlatBufferBuilder &_fbb,
   CMD cmd = CMD_CMD_INVALID,
   int32_t type = 0,
   int32_t ret = 0) {
  msg_headBuilder builder_(_fbb);
  builder_.add_ret(ret);
  builder_.add_type(type);
  builder_.add_cmd(cmd);
  return builder_.Finish();
}

struct msg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const msg_head *head() const { return GetPointer<const msg_head *>(4); }
  msg_head *mutable_head() { return GetPointer<msg_head *>(4); }
  const msg_body *body() const { return GetPointer<const msg_body *>(6); }
  msg_body *mutable_body() { return GetPointer<msg_body *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* head */) &&
           verifier.VerifyTable(head()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* body */) &&
           verifier.VerifyTable(body()) &&
           verifier.EndTable();
  }
};

struct msgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_head(flatbuffers::Offset<msg_head> head) { fbb_.AddOffset(4, head); }
  void add_body(flatbuffers::Offset<msg_body> body) { fbb_.AddOffset(6, body); }
  msgBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  msgBuilder &operator=(const msgBuilder &);
  flatbuffers::Offset<msg> Finish() {
    auto o = flatbuffers::Offset<msg>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<msg> Createmsg(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<msg_head> head = 0,
   flatbuffers::Offset<msg_body> body = 0) {
  msgBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_head(head);
  return builder_.Finish();
}

inline const atbus::protocol::msg *Getmsg(const void *buf) { return flatbuffers::GetRoot<atbus::protocol::msg>(buf); }

inline msg *GetMutablemsg(void *buf) { return flatbuffers::GetMutableRoot<msg>(buf); }

inline bool VerifymsgBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<atbus::protocol::msg>(); }

inline void FinishmsgBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<atbus::protocol::msg> root) { fbb.Finish(root); }

}  // namespace protocol
}  // namespace atbus

#endif  // FLATBUFFERS_GENERATED_ATBUSPROTO_ATBUS_PROTOCOL_H_
